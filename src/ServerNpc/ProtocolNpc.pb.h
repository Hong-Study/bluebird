// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolNpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtocolNpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtocolNpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtocolNpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtocolNpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtocolNpc_2eproto;
namespace Npc {
class GameData;
struct GameDataDefaultTypeInternal;
extern GameDataDefaultTypeInternal _GameData_default_instance_;
class LoginData;
struct LoginDataDefaultTypeInternal;
extern LoginDataDefaultTypeInternal _LoginData_default_instance_;
class Obstacle;
struct ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
}  // namespace Npc
PROTOBUF_NAMESPACE_OPEN
template<> ::Npc::GameData* Arena::CreateMaybeMessage<::Npc::GameData>(Arena*);
template<> ::Npc::LoginData* Arena::CreateMaybeMessage<::Npc::LoginData>(Arena*);
template<> ::Npc::Obstacle* Arena::CreateMaybeMessage<::Npc::Obstacle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Npc {

enum INGAME : int {
  LOGIN = 0,
  GAME = 1,
  INGAME_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  INGAME_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool INGAME_IsValid(int value);
constexpr INGAME INGAME_MIN = LOGIN;
constexpr INGAME INGAME_MAX = GAME;
constexpr int INGAME_ARRAYSIZE = INGAME_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* INGAME_descriptor();
template<typename T>
inline const std::string& INGAME_Name(T enum_t_value) {
  static_assert(::std::is_same<T, INGAME>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function INGAME_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    INGAME_descriptor(), enum_t_value);
}
inline bool INGAME_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, INGAME* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<INGAME>(
    INGAME_descriptor(), name, value);
}
// ===================================================================

class LoginData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Npc.LoginData) */ {
 public:
  inline LoginData() : LoginData(nullptr) {}
  ~LoginData() override;
  explicit constexpr LoginData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginData(const LoginData& from);
  LoginData(LoginData&& from) noexcept
    : LoginData() {
    *this = ::std::move(from);
  }

  inline LoginData& operator=(const LoginData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginData& operator=(LoginData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginData* internal_default_instance() {
    return reinterpret_cast<const LoginData*>(
               &_LoginData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginData& a, LoginData& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginData* New() const final {
    return new LoginData();
  }

  LoginData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginData& from);
  void MergeFrom(const LoginData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Npc.LoginData";
  }
  protected:
  explicit LoginData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapLevelFieldNumber = 1,
    kMatchRoomFieldNumber = 2,
  };
  // int32 mapLevel = 1;
  void clear_maplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 maplevel() const;
  void set_maplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maplevel() const;
  void _internal_set_maplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 matchRoom = 2;
  void clear_matchroom();
  ::PROTOBUF_NAMESPACE_ID::int32 matchroom() const;
  void set_matchroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchroom() const;
  void _internal_set_matchroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Npc.LoginData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 maplevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchroom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtocolNpc_2eproto;
};
// -------------------------------------------------------------------

class GameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Npc.GameData) */ {
 public:
  inline GameData() : GameData(nullptr) {}
  ~GameData() override;
  explicit constexpr GameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameData(const GameData& from);
  GameData(GameData&& from) noexcept
    : GameData() {
    *this = ::std::move(from);
  }

  inline GameData& operator=(const GameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameData& operator=(GameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameData* internal_default_instance() {
    return reinterpret_cast<const GameData*>(
               &_GameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameData& a, GameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GameData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameData* New() const final {
    return new GameData();
  }

  GameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameData& from);
  void MergeFrom(const GameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Npc.GameData";
  }
  protected:
  explicit GameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 3,
    kMatchRoomFieldNumber = 1,
    kObstacleSizeFieldNumber = 2,
  };
  // repeated .Npc.Obstacle obstacle = 3;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::Npc::Obstacle* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Npc::Obstacle >*
      mutable_obstacle();
  private:
  const ::Npc::Obstacle& _internal_obstacle(int index) const;
  ::Npc::Obstacle* _internal_add_obstacle();
  public:
  const ::Npc::Obstacle& obstacle(int index) const;
  ::Npc::Obstacle* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Npc::Obstacle >&
      obstacle() const;

  // int32 matchRoom = 1;
  void clear_matchroom();
  ::PROTOBUF_NAMESPACE_ID::int32 matchroom() const;
  void set_matchroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchroom() const;
  void _internal_set_matchroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 obstacleSize = 2;
  void clear_obstaclesize();
  ::PROTOBUF_NAMESPACE_ID::int32 obstaclesize() const;
  void set_obstaclesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obstaclesize() const;
  void _internal_set_obstaclesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Npc.GameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Npc::Obstacle > obstacle_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchroom_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstaclesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtocolNpc_2eproto;
};
// -------------------------------------------------------------------

class Obstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Npc.Obstacle) */ {
 public:
  inline Obstacle() : Obstacle(nullptr) {}
  ~Obstacle() override;
  explicit constexpr Obstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Obstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return new Obstacle();
  }

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Npc.Obstacle";
  }
  protected:
  explicit Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kShapeFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shape = 2;
  void clear_shape();
  ::PROTOBUF_NAMESPACE_ID::int32 shape() const;
  void set_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape() const;
  void _internal_set_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 5;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Npc.Obstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 shape_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtocolNpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginData

// int32 mapLevel = 1;
inline void LoginData::clear_maplevel() {
  maplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginData::_internal_maplevel() const {
  return maplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginData::maplevel() const {
  // @@protoc_insertion_point(field_get:Npc.LoginData.mapLevel)
  return _internal_maplevel();
}
inline void LoginData::_internal_set_maplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maplevel_ = value;
}
inline void LoginData::set_maplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maplevel(value);
  // @@protoc_insertion_point(field_set:Npc.LoginData.mapLevel)
}

// int32 matchRoom = 2;
inline void LoginData::clear_matchroom() {
  matchroom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginData::_internal_matchroom() const {
  return matchroom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginData::matchroom() const {
  // @@protoc_insertion_point(field_get:Npc.LoginData.matchRoom)
  return _internal_matchroom();
}
inline void LoginData::_internal_set_matchroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matchroom_ = value;
}
inline void LoginData::set_matchroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchroom(value);
  // @@protoc_insertion_point(field_set:Npc.LoginData.matchRoom)
}

// -------------------------------------------------------------------

// GameData

// int32 matchRoom = 1;
inline void GameData::clear_matchroom() {
  matchroom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameData::_internal_matchroom() const {
  return matchroom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameData::matchroom() const {
  // @@protoc_insertion_point(field_get:Npc.GameData.matchRoom)
  return _internal_matchroom();
}
inline void GameData::_internal_set_matchroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matchroom_ = value;
}
inline void GameData::set_matchroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchroom(value);
  // @@protoc_insertion_point(field_set:Npc.GameData.matchRoom)
}

// int32 obstacleSize = 2;
inline void GameData::clear_obstaclesize() {
  obstaclesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameData::_internal_obstaclesize() const {
  return obstaclesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameData::obstaclesize() const {
  // @@protoc_insertion_point(field_get:Npc.GameData.obstacleSize)
  return _internal_obstaclesize();
}
inline void GameData::_internal_set_obstaclesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obstaclesize_ = value;
}
inline void GameData::set_obstaclesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obstaclesize(value);
  // @@protoc_insertion_point(field_set:Npc.GameData.obstacleSize)
}

// repeated .Npc.Obstacle obstacle = 3;
inline int GameData::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int GameData::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void GameData::clear_obstacle() {
  obstacle_.Clear();
}
inline ::Npc::Obstacle* GameData::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:Npc.GameData.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Npc::Obstacle >*
GameData::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:Npc.GameData.obstacle)
  return &obstacle_;
}
inline const ::Npc::Obstacle& GameData::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::Npc::Obstacle& GameData::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:Npc.GameData.obstacle)
  return _internal_obstacle(index);
}
inline ::Npc::Obstacle* GameData::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::Npc::Obstacle* GameData::add_obstacle() {
  // @@protoc_insertion_point(field_add:Npc.GameData.obstacle)
  return _internal_add_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Npc::Obstacle >&
GameData::obstacle() const {
  // @@protoc_insertion_point(field_list:Npc.GameData.obstacle)
  return obstacle_;
}

// -------------------------------------------------------------------

// Obstacle

// int32 id = 1;
inline void Obstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:Npc.Obstacle.id)
  return _internal_id();
}
inline void Obstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Obstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Npc.Obstacle.id)
}

// int32 shape = 2;
inline void Obstacle::clear_shape() {
  shape_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_shape() const {
  return shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::shape() const {
  // @@protoc_insertion_point(field_get:Npc.Obstacle.shape)
  return _internal_shape();
}
inline void Obstacle::_internal_set_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shape_ = value;
}
inline void Obstacle::set_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:Npc.Obstacle.shape)
}

// float x = 3;
inline void Obstacle::clear_x() {
  x_ = 0;
}
inline float Obstacle::_internal_x() const {
  return x_;
}
inline float Obstacle::x() const {
  // @@protoc_insertion_point(field_get:Npc.Obstacle.x)
  return _internal_x();
}
inline void Obstacle::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Obstacle::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Npc.Obstacle.x)
}

// float y = 4;
inline void Obstacle::clear_y() {
  y_ = 0;
}
inline float Obstacle::_internal_y() const {
  return y_;
}
inline float Obstacle::y() const {
  // @@protoc_insertion_point(field_get:Npc.Obstacle.y)
  return _internal_y();
}
inline void Obstacle::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Obstacle::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Npc.Obstacle.y)
}

// float z = 5;
inline void Obstacle::clear_z() {
  z_ = 0;
}
inline float Obstacle::_internal_z() const {
  return z_;
}
inline float Obstacle::z() const {
  // @@protoc_insertion_point(field_get:Npc.Obstacle.z)
  return _internal_z();
}
inline void Obstacle::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Obstacle::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Npc.Obstacle.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Npc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Npc::INGAME> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Npc::INGAME>() {
  return ::Npc::INGAME_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtocolNpc_2eproto
