// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtocolServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtocolServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtocolServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtocolServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtocolServer_2eproto;
namespace Match {
class Users;
struct UsersDefaultTypeInternal;
extern UsersDefaultTypeInternal _Users_default_instance_;
}  // namespace Match
PROTOBUF_NAMESPACE_OPEN
template<> ::Match::Users* Arena::CreateMaybeMessage<::Match::Users>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Match {

// ===================================================================

class Users final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Match.Users) */ {
 public:
  inline Users() : Users(nullptr) {}
  ~Users() override;
  explicit constexpr Users(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Users(const Users& from);
  Users(Users&& from) noexcept
    : Users() {
    *this = ::std::move(from);
  }

  inline Users& operator=(const Users& from) {
    CopyFrom(from);
    return *this;
  }
  inline Users& operator=(Users&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Users& default_instance() {
    return *internal_default_instance();
  }
  static inline const Users* internal_default_instance() {
    return reinterpret_cast<const Users*>(
               &_Users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Users& a, Users& b) {
    a.Swap(&b);
  }
  inline void Swap(Users* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Users* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Users* New() const final {
    return new Users();
  }

  Users* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Users>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Users& from);
  void MergeFrom(const Users& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Users* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Match.Users";
  }
  protected:
  explicit Users(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 4,
    kUserSizeFieldNumber = 1,
    kRoomFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // repeated uint32 ids = 4;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ids();

  // uint32 userSize = 1;
  void clear_usersize();
  ::PROTOBUF_NAMESPACE_ID::uint32 usersize() const;
  void set_usersize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usersize() const;
  void _internal_set_usersize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 room = 2;
  void clear_room();
  ::PROTOBUF_NAMESPACE_ID::uint32 room() const;
  void set_room(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_room() const;
  void _internal_set_room(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Match.Users)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usersize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 room_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtocolServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Users

// uint32 userSize = 1;
inline void Users::clear_usersize() {
  usersize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Users::_internal_usersize() const {
  return usersize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Users::usersize() const {
  // @@protoc_insertion_point(field_get:Match.Users.userSize)
  return _internal_usersize();
}
inline void Users::_internal_set_usersize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usersize_ = value;
}
inline void Users::set_usersize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usersize(value);
  // @@protoc_insertion_point(field_set:Match.Users.userSize)
}

// uint32 room = 2;
inline void Users::clear_room() {
  room_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Users::_internal_room() const {
  return room_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Users::room() const {
  // @@protoc_insertion_point(field_get:Match.Users.room)
  return _internal_room();
}
inline void Users::_internal_set_room(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  room_ = value;
}
inline void Users::set_room(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_room(value);
  // @@protoc_insertion_point(field_set:Match.Users.room)
}

// uint32 level = 3;
inline void Users::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Users::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Users::level() const {
  // @@protoc_insertion_point(field_get:Match.Users.level)
  return _internal_level();
}
inline void Users::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void Users::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Match.Users.level)
}

// repeated uint32 ids = 4;
inline int Users::_internal_ids_size() const {
  return ids_.size();
}
inline int Users::ids_size() const {
  return _internal_ids_size();
}
inline void Users::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Users::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Users::ids(int index) const {
  // @@protoc_insertion_point(field_get:Match.Users.ids)
  return _internal_ids(index);
}
inline void Users::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Match.Users.ids)
}
inline void Users::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ids_.Add(value);
}
inline void Users::add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:Match.Users.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Users::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Users::ids() const {
  // @@protoc_insertion_point(field_list:Match.Users.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Users::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Users::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Match.Users.ids)
  return _internal_mutable_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Match

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtocolServer_2eproto
